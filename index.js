// Generated by CoffeeScript 1.12.2
(function() {
  var _, app, bodyParser, channels, connection, express, getChannels, mongoose, path, users;

  express = require('express');

  app = express();

  _ = require('underscore');

  bodyParser = require('body-parser');

  mongoose = require('mongoose');

  path = require('path');

  connection = mongoose.createConnection(process.env.mongod);

  channels = connection.model('channel', require('./channels'));

  users = connection.model('user', require('./users'));

  app.set('port', process.env.PORT || 5000);

  app.use('/img', express["static"](path.join(__dirname, 'img')));

  app.use(express["static"](__dirname + '/public'));

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.set('views', __dirname + '/views');

  app.set('view engine', 'ejs');

  getChannels = function(req, res) {
    return channels.find({}, function(err, channels) {
      var channel, i, len;
      if (err) {
        return res.send({
          err: 'Error retrieving channels!',
          res: null
        });
      } else {
        for (i = 0, len = channels.length; i < len; i++) {
          channel = channels[i];
          channel.messages = _.last(channel.messages, 50);
        }
        return res.send({
          err: null,
          res: channels
        });
      }
    });
  };

  app.post('/', function(req, res) {
    return res.sendfile(__dirname + '/index.html');
  });

  app.post('/getLast50', function(req, res) {
    return getChannels(req, res);
  });

  app.post('/updateLog', function(req, res) {
    var obj;
    obj = req.body;
    return channels.findOne({
      name: obj.name
    }, function(err, channel) {
      var messages, msg;
      if (err || (channel == null)) {
        return console.error('Error finding channel');
      } else {
        messages = channel.messages;
        msg = {
          userId: obj.userId,
          time: obj.time,
          message: obj.message
        };
        messages.push(msg);
        return channels.update({
          name: channel.name
        }, {
          messages: messages
        }, function(err, raw) {
          if (err) {
            console.error('Error updating channel');
          }
          return res.send('Logs for ' + obj.name + ' updated!');
        });
      }
    });
  });

  app.post('/getUsers', function(req, res) {
    return users.find({}, function(err, users) {
      if (err) {
        return res.send({
          err: 'Error retrieving users!',
          res: null
        });
      } else {
        return res.send({
          err: null,
          res: users
        });
      }
    });
  });

  app.post('/addChannel', function(req, res) {
    var obj;
    obj = req.body;
    return channels.create({
      name: obj.name,
      messages: []
    }, function(err, channel) {
      if (err) {
        return res.send({
          err: 'Error creating channel!',
          res: null
        });
      } else {
        return getChannels(req, res);
      }
    });
  });

  app.listen(app.get('port'), function() {
    return console.log('Node app is running on port', app.get('port'));
  });

}).call(this);
